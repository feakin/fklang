ContextMap TicketBooking {
  ReservationCtx <-> UserCtx;
}

Context ReservationCtx { }

Context UserCtx {
  Aggregate Ticket, Reservation, User;
}

Aggregate User {
  DomainEvent UserCreated;
}

layered DDD {
  dependency {
    interface -> application
    application -> domain
    interface -> domain
    application -> infrastructure
    interface -> infrastructure
  }
  layer interface {
    package: "com.example.book";
  }
  layer domain {
    package: "com.example.domain";
  }
  layer application {
    package: "com.example.application";
  }
  layer infrastructure {
    package: "com.example.infrastructure";
  }
}


impl PackageJsonGet {
  endpoint {
    GET "https://raw.githubusercontent.com/feakin/vscode-feakin/master/package.json";
  }
}

// binding;
impl UserCreated {
  endpoint {
    POST "/user/{id}";
    authorization: Basic admin admin;
    response: User;
  }

  flow {
    via UserRepository::getUserById receive user: User
    via UserRepository::save(user: User) receive user: User;
    via Kafak send User to "user.create";
  }
}
